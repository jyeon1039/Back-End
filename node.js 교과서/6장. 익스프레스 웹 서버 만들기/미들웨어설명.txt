1. morgan
  - 요청과 응답에 대한 정보를 콘솔에 기록
  - 인수로 dev, combined, common, short, tiny 등을 넣을 수 있음
  - 보통 개발 환경에서는 dev, 배포 환경에서는 combined 를 사용

2. static
  - 정적인 파일들을 제공하는 라우터 역할
  - 인수로 정적 파일들이 담겨 있는 폴더를 지정
  - 파일을 발견했다면 응답으로 파일을 보내고 next 를 호출하지 않기 때문에 다음 미들웨어는 실행되지 않는다. 

3. body-parser
  - 요청의 본문에 있는 데이터를 해석해서 req.body 객체로 만들어주는 미들웨어
  - 보통 폼 데이터난 AJAX 요청의 데이터를 처리
  - 멀티파트(이미지, 동영상, 파일) 데이터는 처리하지 못 한다. 그 경우에는 multer 모듈을 사용
  - express 4.16.0 버전부터 body-parser 미들웨어의 일부 기능이 express에 내장되어 있기 때문에 따로 설치할 필요 없지만,
  raw나 text 같이 버퍼나 텍스트 요청을 처리할 필요가 있다면 body-parser를 설치한 후 다음과 같이 추가해야 함
    => const bodyParser = require('body-parser');
        app.use(bodyParser.raw());
        app.use(bodyParser.text());
  - extended 옵션
    - false : querystring 모듈을 사용하여 쿼리스트링 해석
    - true : qs 모듈을 사용하여 쿼리스트링 해석 (qs 는 npm 패키지이며 querystring 모듈의 기능을 좀 더 확장한 모듈)

4. cookie-parser 
  - 쿠키를 해석해 req.cookies 객체로 만듦
  - 첫 번째 인수로 비밀 키를 넣을 수 있다. 서명된 쿠기가 있는 경우, 제공한 비밀 키를 통해 해당 쿠키가 내 서버가 만든
    쿠키임을 검증할 수 있음
  - 쿠키는 클라이언트에서 위조하기 쉬우므로 비밀 키를 통해 만들어낸 서명을 쿠키 값 뒤에 붙임
  - 서명된 쿠키는 req.cookies 대신 req.signedCookies 객체에 들어있음
  - 쿠키를 생성/제거하기 위해서는 res.cookie, res.clearCookie 메서드를 사용
    쿠키를 제거하려면, 생성할 때의 키와 값 외에 옵션도 정확히 일치해야한다. 단, expires나 maxAge 옵션은 일치할 필요 없음
  - 옵션 중에는 signed 라는 옵션이 있는데, 이를 true 로 설정하면 쿠키 뒤에 서명이 붙음

5. express-session
  - 세션 관리용 미들웨어
  - 세션을 구현하거나 특정 사용자를 위한 데이터를 임시적으로 저장해둘 때 유용
  - 세션은 사용자별로 req.session 객체 안에 유지됨
  - 인수로 세션에 대한 설정
    - resave : 요청이 올 때 세션에 수정 사항이 생기지 않더라도 세션을 다시 저장할지 설정
    - saveUninitialized : 세션에 저장할 내역이 없더라도 처음부터 세션을 설정할지
    - 안전하게 쿠키를 전송하려면 쿠키에 서명을 추가해야 하고, 쿠키를 서명하는 데 secret 의 값이 필요
      -> cookie-parser 의 secret 과 같게 설정하는 것이 좋음
    - 세션 쿠키의 이름은 name 옵션으로 설정. default는 connect.signed
    - cookie : 세션 쿠키에 대한 설정
  - store 옵션을 사용하면 데이터베이스를 연결하여 세션을 유지할 수 있음. 보통 레디스가 자주 쓰임
  - req.session.name = 'jihyeon'; //세션 등록
  - req.sessionID; // 세션 아이디 확인
  - req.session.destroy(); //세션 모두 제거

  - express-session 에서 서명한 쿠키 앞에는 s: 이 붙음. 실제로는 encodedURIComponent 함수가 실행되어 s%3A가 앞에 붙음

6. 미들웨어 간에 데이터를 전달하는 방법
  - req.data 사용 
    => 요청이 끝날 때까지만 데이터를 유지
    => 새로운 요청이 오면 초기화 됨
    => 속성명이 꼭 data일 필요는 없지만 달른 미들웨어와 겹치지 않게 조심해야 함 
      ex) req.body 로 한다면 body-parser 미들웨어와 기능이 겹치게 됨 
  - 세션을 사용한다면 req.session 객체에 데이터를 넣어도 되지만, 세션이 유지되는 동안에 데이터도 계속 유지된다는 단점 존재
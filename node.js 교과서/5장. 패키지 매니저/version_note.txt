[버전이 세 자리인 이유]
- SemVer 방식의 버전 넘버링을 따르기 때문
- SemVer는 Semantic Versioning(유의적 버전)의 약어. 버전을 구성하는 세 자리가 모두 의미를 가지고 있다는 뜻
    - 첫 번째 자리 - major 버전
        - 0 : 초기 개발 중
        - 1 : 정식 버전
        => 하위 호환이 안 될 정도로 패키지의 내용이 수정되었을 때 올린다.
           즉 1.5.0에서 2.0.0으로 올렸다면, 1.5.0 버전 패키지를 사용했던 사람들이 업데이트 했을 때 에러 발생할 확률 높다.
    - 두 번째 자리 - minor 버전
        => 하위 호환이 되는 기능을 업데이트 할 때 올린다.
        => 1.5.0에서 1.6.0으로 올렸다면, 1.5.0 사용자가 1.6.0으로 업데이트했을 때 아무 문제 없어야 한다.
    - 세 번째 자리 - patch 버전
        => 기존 기능에 문제가 있어 수정한 것을 내놓았을 때 올린다.
        => 업데이트 후 아무 문제가 없어야 한다.

- 배포된 버전 내용이 바뀌지 않아서 패키지 간 의존 관계에 도움이 되며, 특정 버전이 정상적으로 동작하고 같은 버전을 사용하면
  어떠한 경우라도 정상적으로 동작할 것이라 믿을 수 있다.
- 버전의 숫자마다 의미가 부여되어 있으므로 다른 패키지를 사용할 때도 버전만 보고 에러 발생 여부를 가늠할 수 있다.

[^나 ~ 또는 >, < 같은 문자의 의미]
- ^ 기호
    - minor 버전까지만 설치하거나 업데이트
    - npm i express@^1.1.1 이라면 1.1.1 이상부터 2.0,0 미만까지 설치된다.
    - 1.x.x 로도 표현 가능
- ~ 기호
    - patch 버전까지만 설치하거나 업데이트- npm i express@~1.1.1 이라면 1.1.1 이상ㄴ부터 1.2.0 미만 버전까지 설치
    - 1.1.x 로도 표현 가능
=> ~보다 ^이 많이 사용되는 이유는 minor 버전까지는 하위 호환이 보장되기 때문이다.

- >, <, >=, <=, = 는 알기 쉽게 초과, 미만, 이상, 이하, 동일을 뜻한다.
- @latest  
    - 안정된 최신 버전의 패키지 
    - x 로도 표현 가능
    - npm i express@latest 또는 npm i express@x
- @next
    - 가장 최근 배포판 사용 가능
    - 안정되지 않은 알파나 베타 버전의 패키지를 설치할 수도 있다.
    - 알파나 베타 버전은 1.1.1-alpha.0 나 2.0.0-beta.1 처럼 표시한다.
    - 출시 직전의 패키지에는 2.0.0-rc.0처럼 rc(Release Candidate)가 붙는 경우도 있더,